}
sort <- function(data, outcome){
data[order(data[outcome], data$Hospital.Name), ]
}
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(! state %in% data$State)
stop("invalid state")
colName <- getColName(outcome)
if(!colName %in% colnames(data))
stop("invalid outcome")
## Return hospital name in that state with the given rank
## 30-day death rate
sorted <- getSortedState(data, state, colName)
sorted$Hospital.Name[getPosition(sorted, num)]
}
getSortedState <- function(data, state, colName){
stateRows <- getStateRows(data, state)
stateRows[, colName] <- suppressWarnings(as.numeric(stateRows[, colName]))
#Remove NAs
stateRows <- stateRows[!is.na(stateRows[colName]),]
sort(stateRows, colName)
}
getStateRows <- function(data, state) {
## Return rows for a particular state
stateRows <- data[data$State == state,]
}
getColName <- function(outcome) {
paste("Hospital.30.Day.Death..Mortality..Rates.from", formatOutcome(outcome), sep=".")
}
getPosition(data, num){
if(num == "best"){
1
}
else if(num == "worst"){
nrow(data)
}
else{
num
}
}
formatOutcome <- function(x) {
s <- strsplit(x, " ")[[1]]
upper <- paste(toupper(substring(s, 1, 1)), substring(s, 2), sep = "", collapse=".")
}
sort <- function(data, outcome){
data[order(data[outcome], data$Hospital.Name), ]
}
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(! state %in% data$State)
stop("invalid state")
colName <- getColName(outcome)
if(!colName %in% colnames(data))
stop("invalid outcome")
## Return hospital name in that state with the given rank
## 30-day death rate
sorted <- getSortedState(data, state, colName)
sorted$Hospital.Name[getPosition(sorted, num)]
}
getSortedState <- function(data, state, colName){
stateRows <- getStateRows(data, state)
stateRows[, colName] <- suppressWarnings(as.numeric(stateRows[, colName]))
#Remove NAs
stateRows <- stateRows[!is.na(stateRows[colName]),]
sort(stateRows, colName)
}
getStateRows <- function(data, state) {
## Return rows for a particular state
stateRows <- data[data$State == state,]
}
getColName <- function(outcome) {
paste("Hospital.30.Day.Death..Mortality..Rates.from", formatOutcome(outcome), sep=".")
}
getPosition(data, num){
if(num == "best"){
1
}
else if(num == "worst"){
nrow(data)
}
else{
num
}
}
formatOutcome <- function(x) {
s <- strsplit(x, " ")[[1]]
upper <- paste(toupper(substring(s, 1, 1)), substring(s, 2), sep = "", collapse=".")
}
sort <- function(data, outcome){
data[order(data[outcome], data$Hospital.Name), ]
}
getPosition(data, num){
if(num == "best"){
1
}
else if(num == "worst"){
nrow(data)
}
else{
num
}
}
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(! state %in% data$State)
stop("invalid state")
colName <- getColName(outcome)
if(!colName %in% colnames(data))
stop("invalid outcome")
## Return hospital name in that state with the given rank
## 30-day death rate
sorted <- getSortedState(data, state, colName)
sorted$Hospital.Name[getPosition(sorted, num)]
}
getSortedState <- function(data, state, colName){
stateRows <- getStateRows(data, state)
stateRows[, colName] <- suppressWarnings(as.numeric(stateRows[, colName]))
#Remove NAs
stateRows <- stateRows[!is.na(stateRows[colName]),]
sort(stateRows, colName)
}
getStateRows <- function(data, state) {
## Return rows for a particular state
stateRows <- data[data$State == state,]
}
getColName <- function(outcome) {
paste("Hospital.30.Day.Death..Mortality..Rates.from", formatOutcome(outcome), sep=".")
}
getPosition <- function(data, num){
if(num == "best")
1
else if(num == "worst")
nrow(data)
else
num
}
formatOutcome <- function(x) {
s <- strsplit(x, " ")[[1]]
upper <- paste(toupper(substring(s, 1, 1)), substring(s, 2), sep = "", collapse=".")
}
sort <- function(data, outcome){
data[order(data[outcome], data$Hospital.Name), ]
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
submit
submit()
submit()
submit()
submit()
data
data[data$State,]
data[,data$State]
colnames(data)
data$State
unique(data$State)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(! state %in% data$State)
stop("invalid state")
colName <- getColName(outcome)
if(!colName %in% colnames(data))
stop("invalid outcome")
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
state <- unique(data$State)
hospitals <- sapply(state, rankhospital)
data.frame(state, hospitals)
rankhospital <- function(state) {
## Return hospital name in that state with the given rank
## 30-day death rate
sorted <- getSortedState(data, state, colName)
sorted$Hospital.Name[getPosition(sorted, num)]
}
}
getSortedState <- function(data, state, colName){
stateRows <- getStateRows(data, state)
#Convert the column we are interested in to a numeric
stateRows[, colName] <- suppressWarnings(as.numeric(stateRows[, colName]))
#Remove NAs
stateRows <- stateRows[!is.na(stateRows[colName]),]
sort(stateRows, colName)
}
getStateRows <- function(data, state) {
## Return rows for a particular state
stateRows <- data[data$State == state,]
}
getColName <- function(outcome) {
paste("Hospital.30.Day.Death..Mortality..Rates.from", formatOutcome(outcome), sep=".")
}
getPosition <- function(data, num){
if(num == "best")
1
else if(num == "worst")
nrow(data)
else
num
}
formatOutcome <- function(x) {
s <- strsplit(x, " ")[[1]]
upper <- paste(toupper(substring(s, 1, 1)), substring(s, 2), sep = "", collapse=".")
}
sort <- function(data, outcome){
data[order(data[outcome], data$Hospital.Name), ]
}
head(rankall("heart attack", 20), 10)
rankall("heart attack", 20)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(! state %in% data$State)
stop("invalid state")
colName <- getColName(outcome)
if(!colName %in% colnames(data))
stop("invalid outcome")
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
state <- unique(data$State)
hospitals <- sapply(state, rankhospital)
data.frame(state, hospitals)
rankhospital <- function(state) {
## Return hospital name in that state with the given rank
## 30-day death rate
sorted <- getSortedState(data, state, colName)
sorted$Hospital.Name[getPosition(sorted, num)]
}
}
getSortedState <- function(data, state, colName){
stateRows <- getStateRows(data, state)
#Convert the column we are interested in to a numeric
stateRows[, colName] <- suppressWarnings(as.numeric(stateRows[, colName]))
#Remove NAs
stateRows <- stateRows[!is.na(stateRows[colName]),]
sort(stateRows, colName)
}
getStateRows <- function(data, state) {
## Return rows for a particular state
stateRows <- data[data$State == state,]
}
getColName <- function(outcome) {
paste("Hospital.30.Day.Death..Mortality..Rates.from", formatOutcome(outcome), sep=".")
}
getPosition <- function(data, num){
if(num == "best")
1
else if(num == "worst")
nrow(data)
else
num
}
formatOutcome <- function(x) {
s <- strsplit(x, " ")[[1]]
upper <- paste(toupper(substring(s, 1, 1)), substring(s, 2), sep = "", collapse=".")
}
sort <- function(data, outcome){
data[order(data[outcome], data$Hospital.Name), ]
}
state <- unique(data$State)
rankall <- function(outcome, num = "best") {
rankhospital <- function(state) {
## Return hospital name in that state with the given rank
## 30-day death rate
sorted <- getSortedState(data, state, colName)
sorted$Hospital.Name[getPosition(sorted, num)]
}
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(! state %in% data$State)
stop("invalid state")
colName <- getColName(outcome)
if(!colName %in% colnames(data))
stop("invalid outcome")
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
state <- unique(data$State)
hospitals <- sapply(state, rankhospital)
data.frame(state, hospitals)
}
getSortedState <- function(data, state, colName){
stateRows <- getStateRows(data, state)
#Convert the column we are interested in to a numeric
stateRows[, colName] <- suppressWarnings(as.numeric(stateRows[, colName]))
#Remove NAs
stateRows <- stateRows[!is.na(stateRows[colName]),]
sort(stateRows, colName)
}
getStateRows <- function(data, state) {
## Return rows for a particular state
stateRows <- data[data$State == state,]
}
getColName <- function(outcome) {
paste("Hospital.30.Day.Death..Mortality..Rates.from", formatOutcome(outcome), sep=".")
}
getPosition <- function(data, num){
if(num == "best")
1
else if(num == "worst")
nrow(data)
else
num
}
formatOutcome <- function(x) {
s <- strsplit(x, " ")[[1]]
upper <- paste(toupper(substring(s, 1, 1)), substring(s, 2), sep = "", collapse=".")
}
sort <- function(data, outcome){
data[order(data[outcome], data$Hospital.Name), ]
}
rankall("heart attack", 20)
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 10)
states <- unique(data$State)
sort.list(states)
order(states)
states[order(states)]
rankall <- function(outcome, num = "best") {
rankhospital <- function(state) {
## Return hospital name in that state with the given rank
## 30-day death rate
sorted <- getSortedState(data, state, colName)
sorted$Hospital.Name[getPosition(sorted, num)]
}
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(! state %in% data$State)
stop("invalid state")
colName <- getColName(outcome)
if(!colName %in% colnames(data))
stop("invalid outcome")
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
states <- unique(data$State)
states <- states[order(states)]
hospitals <- sapply(state, rankhospital)
data.frame(state, hospitals)
}
getSortedState <- function(data, state, colName){
stateRows <- getStateRows(data, state)
#Convert the column we are interested in to a numeric
stateRows[, colName] <- suppressWarnings(as.numeric(stateRows[, colName]))
#Remove NAs
stateRows <- stateRows[!is.na(stateRows[colName]),]
sort(stateRows, colName)
}
getStateRows <- function(data, state) {
## Return rows for a particular state
stateRows <- data[data$State == state,]
}
getColName <- function(outcome) {
paste("Hospital.30.Day.Death..Mortality..Rates.from", formatOutcome(outcome), sep=".")
}
getPosition <- function(data, num){
if(num == "best")
1
else if(num == "worst")
nrow(data)
else
num
}
formatOutcome <- function(x) {
s <- strsplit(x, " ")[[1]]
upper <- paste(toupper(substring(s, 1, 1)), substring(s, 2), sep = "", collapse=".")
}
sort <- function(data, outcome){
data[order(data[outcome], data$Hospital.Name), ]
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
rankhospital <- function(state) {
## Return hospital name in that state with the given rank
## 30-day death rate
sorted <- getSortedState(data, state, colName)
sorted$Hospital.Name[getPosition(sorted, num)]
}
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(! state %in% data$State)
stop("invalid state")
colName <- getColName(outcome)
if(!colName %in% colnames(data))
stop("invalid outcome")
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
state <- unique(data$State)
state <- state[order(state)]
hospital <- sapply(state, rankhospital)
data.frame(hospital, state)
}
getSortedState <- function(data, state, colName){
stateRows <- getStateRows(data, state)
#Convert the column we are interested in to a numeric
stateRows[, colName] <- suppressWarnings(as.numeric(stateRows[, colName]))
#Remove NAs
stateRows <- stateRows[!is.na(stateRows[colName]),]
sort(stateRows, colName)
}
getStateRows <- function(data, state) {
## Return rows for a particular state
stateRows <- data[data$State == state,]
}
getColName <- function(outcome) {
paste("Hospital.30.Day.Death..Mortality..Rates.from", formatOutcome(outcome), sep=".")
}
getPosition <- function(data, num){
if(num == "best")
1
else if(num == "worst")
nrow(data)
else
num
}
formatOutcome <- function(x) {
s <- strsplit(x, " ")[[1]]
upper <- paste(toupper(substring(s, 1, 1)), substring(s, 2), sep = "", collapse=".")
}
sort <- function(data, outcome){
data[order(data[outcome], data$Hospital.Name), ]
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("pneumonia", "worst"), 3)
rankall <- function(outcome, num = "best") {
rankhospital <- function(state) {
## Return hospital name in that state with the given rank
## 30-day death rate
sorted <- getSortedState(data, state, colName)
sorted$Hospital.Name[getPosition(sorted, num)]
}
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome is valid
colName <- getColName(outcome)
if(!colName %in% colnames(data))
stop("invalid outcome")
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
state <- unique(data$State)
state <- state[order(state)]
hospital <- sapply(state, rankhospital)
data.frame(hospital, state)
}
getSortedState <- function(data, state, colName){
stateRows <- getStateRows(data, state)
#Convert the column we are interested in to a numeric
stateRows[, colName] <- suppressWarnings(as.numeric(stateRows[, colName]))
#Remove NAs
stateRows <- stateRows[!is.na(stateRows[colName]),]
sort(stateRows, colName)
}
getStateRows <- function(data, state) {
## Return rows for a particular state
stateRows <- data[data$State == state,]
}
getColName <- function(outcome) {
paste("Hospital.30.Day.Death..Mortality..Rates.from", formatOutcome(outcome), sep=".")
}
getPosition <- function(data, num){
if(num == "best")
1
else if(num == "worst")
nrow(data)
else
num
}
formatOutcome <- function(x) {
s <- strsplit(x, " ")[[1]]
upper <- paste(toupper(substring(s, 1, 1)), substring(s, 2), sep = "", collapse=".")
}
sort <- function(data, outcome){
data[order(data[outcome], data$Hospital.Name), ]
}
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
submit()
submit()
submit()
set.seed(1)
rpois(5, 2)
?qpois
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
?rbinom
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
set.seed(1)
rpois(5, 2)
?qpois
